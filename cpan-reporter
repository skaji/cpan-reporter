#!/usr/bin/env perl
use 5.32.1;
use warnings;
use experimental 'signatures';

use CPAN::DistnameInfo;
use CPAN::Meta::Requirements;
use CPAN::Meta;
use Cwd ();
use File::Basename ();
use File::Path ();
use File::Spec;
use File::Temp ();
use File::pushd ();
use Getopt::Long ();
use HTTP::Tiny;
use IO::Socket::SSL;
use IPC::Run3 ();
use JSON::PP ();
use POSIX ();
use YAML::PP ();
use version ();

our $VERSION = '0.001';

sub run3 ($env, @cmd) {
    local %ENV = $env->%* if $env;
    my $out;
    IPC::Run3::run3 \@cmd, undef, \$out, \$out;
    ($?, $out);
}

sub tempfile ($self) {
    File::Temp::tempfile "cpan-reporter-helper-XXXXX", UNLINK => 0, EXLOCK => 0, DIR => $self->{work_dir};
}

sub new ($class) {
    bless { http => HTTP::Tiny->new }, $class;
}

sub show_help ($self) {
    print <<~'___';
    Usage: cpan-repoter [options] Package [version]

    Options:
      -q, --quiet  be quiet
      -h, --help   show this help
          --perl   specify perl command
          --cpm    specify cpm command
          --make   specify make command
          --work   specify working directory
          --out    specify output json file

    Examples:
      > cpan-repoter App::cpm
      > cpan-repoter App::cpm '== 0.900'
      > cpan-repoter --perl ~/perls/5.8.1/bin/perl App::cpm
    ___
}

sub parse_options ($self, @argv) {
    my $parser = Getopt::Long::Parser->new(
        config => [qw(no_auto_abbrev no_ignore_case)],
    );
    $parser->getoptionsfromarray(\@argv,
        "perl=s" => \(my $perl = $^X),
        "cpm=s" => \my $cpm,
        "make=s" => \(my $make = "make"),
        "work=s" => \(my $work = "."),
        "out=s" => \(my $out),
        "q|quiet" => \my $quiet,
        "h|help" => sub { $self->show_help; exit 1 },
    ) or exit 1;
    $self->{perl} = $perl;
    $self->{make} = $make;
    $self->{work_dir} = $work;
    if (!-d $self->{work_dir}) {
        File::Path::mkpath $self->{work_dir};
    }
    $self->{work_dir} = Cwd::abs_path $self->{work_dir};
    $self->{_quiet} = $quiet;
    if ($cpm) {
        $self->{cpm} = $cpm;
    } else {
        $self->{cpm} = $self->_fetch_cpm;
    }
    if ($out) {
        open my $fh, ">", $out or die "$!: $out\n";
        $self->{out_fh} = $fh;
    } else {
        $self->{out_fh} = \*STDOUT;
    }
    if (1 <= @argv && @argv <= 2) {
        $self->{_argv} = \@argv;
    } else {
        die "Need argument, try `$0 --help`\n";
    }
    $self;
}

sub _fetch_cpm ($self) {
    my $file = File::Spec->catfile($self->{work_dir}, "cpan-reporter-cpm");
    return $file if -f $file;
    $self->log("Fething cpm");
    my $res = $self->{http}->mirror("https://git.io/cpm" => $file);
    die "$res->{status} $res->{reason}: https://git.io/cpm\n" if !$res->{success};
    $file;
}

sub _extlib ($self) {
    File::Spec->catdir($self->{work_dir}, "local");
}

sub _env ($self) {
    my $extlib = $self->_extlib;
    my $bin = File::Spec->catdir($self->_extlib, "bin");
    my $lib = File::Spec->catdir($self->_extlib, "lib", "perl5");
    return undef if !-d $bin && !-d $lib;
    my (@bin, @lib);
    push @bin, $bin if -d $bin;
    push @bin, $ENV{PATH} if $ENV{PATH};
    push @lib, $lib if -d $lib;
    push @lib, $ENV{PERL5LIB} if $ENV{PERL5LIB};
    +{ %ENV, PATH => (join ":", @bin), PERL5LIB => (join ":", @lib) };
}

sub run ($self) {
    my ($package, $version) = $self->{_argv}->@*;
    my $res = $self->_run($package, $version);
    my $json = JSON::PP->new->pretty->canonical->indent_length(2)->space_before(0)->utf8;
    $self->{out_fh}->print($json->encode($res));
}

sub log ($self, $line) {
    return if $self->{_quiet};
    chomp $line;
    warn $line, "\n";
}

sub logf ($self, $format, @argv) {
    return if $self->{_quiet};
    warn sprintf "$format\n", @argv;
}

sub _run ($self, $package, $version) {
    my $guard1 = File::pushd::pushd $self->{work_dir};

    my $download_url = $self->resolve($package, $version);
    $self->log("Resolved $package -> $download_url");
    my $tarball = $self->fetch($download_url);
    $self->log("Fetched $tarball");
    my $dir = $self->untar($tarball);
    $self->log("Extracted $dir");

    my $guard2 = File::pushd::pushd $dir;
    my $RES = +{};

    my $regenerate_meta = sub {
        delete $RES->{meta};
        {
            my $res = $self->envs;
            $RES->{meta}{env} = $res;
        }
        {
            my $res = $self->perl_V;
            $RES->{meta}{perl_V} = $res;
        }
        {
            my $res = $self->perl_info;
            $RES->{meta} = +{ $RES->{meta}->%*, $res->%* };
        }
    };

    {
        $RES->{created} = {
            by => "cpan-reporter $VERSION",
            at => POSIX::strftime("%Y-%m-%d %H:%M:%S%z", localtime),
        };
    }
    {
        my $dist = CPAN::DistnameInfo->new($download_url);
        $RES->{target} = {
            url => $download_url,
            distvname => $dist->distvname,
            version => $dist->version,
            author => $dist->cpanid,
        };
    }
    $regenerate_meta->();
    if (my $perl_req = $self->perl_req) {
        my $req = CPAN::Meta::Requirements->new;
        $req->add_string_requirement("CPAN_REPOTER_TEST", $perl_req);
        if (!$req->accepts_module("CPAN_REPOTER_TEST", $RES->{meta}{version})) {
            $RES->{grade} = 'na';
            $RES->{step_prepare} = {
                cmd => undef,
                out => "$package requires perl $perl_req, but we have perl $RES->{meta}{version}\n",
            };
            return $RES;
        }
    }
    if (my @req = $self->configure_reqs) {
        $self->logf("Found %d configure reqs", scalar @req);
        my $res = $self->install_reqs(@req);
        $RES->{install_configure_reqs} = $res;
        return $RES if !$res->{ok};
        $regenerate_meta->();
    }
    {
        $self->log("Configure dist");
        my $res = $self->configure;
        $RES->{step_configure} = $res;
        if (!$res->{ok}) {
            $RES->{grade} = 'na';
            return $RES;
        }
    }
    if (my @req = $self->reqs) {
        $self->logf("Found %d reqs", scalar @req);
        my $res = $self->install_reqs(@req);
        $RES->{install_reqs} = $res;
        return $RES if !$res->{ok};
        $regenerate_meta->();
    }
    {
        my @req = $self->all_reqs;
        my $res = $self->available_reqs(@req);
        $RES->{prereqs} = $res;
    }
    {
        $self->log("Build dist");
        my $res = $self->build;
        $RES->{step_build} = $res;
        if (!$res->{ok}) {
            $RES->{grade} = 'unknown';
            return $RES;
        }
    }
    {
        $self->log("Test dist");
        my $res = $self->test;
        $RES->{step_test} = $res;
        if (!$res->{ok}) {
            $RES->{grade} = 'fail';
            return $RES;
        }
        if ($res->{out} =~ /^Result: NOTESTS$/m) {
            $RES->{grade} = 'unknown';
            return $RES;
        }
    }
    $RES->{grade} = "pass";
    return $RES;
}

sub resolve ($self, $package, $version) {
    my $url = "https://fastapi.metacpan.org/v1/download_url/$package";
    if ($version) {
        $version =~ s/([^a-zA-Z0-9_\-.])/uc sprintf("%%%02x",ord($1))/eg;
        $url .= "?version=$version";
    }
    my $res = $self->{http}->get($url);
    if ($res->{success}) {
        my $content = JSON::PP::decode_json $res->{content};
        return $content->{download_url};
    }
    die "$res->{status} $res->{reason}, $url\n";
}

sub fetch ($self, $url) {
    my $file = File::Basename::basename $url;
    my $res = $self->{http}->mirror($url => $file);
    if ($res->{success}) {
        return $file;
    }
    die "$res->{status} $res->{reason}, $url\n";
}

sub untar ($self, $tarball) {
    my $dir = $tarball =~ s/\.tar\.gz$//r;
    $dir .= "-" . time;
    mkdir $dir or die "mkdir $dir: $!";
    my ($exit, $out) = run3 undef, "tar", "xf", $tarball, "--strip-components", 1, "-C", $dir;
    if ($exit != 0) {
        die $out;
    }
    $dir;
}

package Req {
    sub new ($class, $package, $version) {
        bless { package => $package, version => $version }, $class;
    }
    sub cpm_req ($self) {
        if ($self->{version}) {
            "$self->{package}: { version: '$self->{version}' }";
        } else {
            "$self->{package}:";
        }
    }
}

package Reqs {
    sub new ($class, @req) {
        bless { reqs => \@req }, $class;
    }
    sub cpmfile ($self) {
        my $content = <<~'EOF';
        prereqs:
          runtime:
            requires:
        EOF
        $content .= "      " . $_->cpm_req . "\n" for $self->{reqs}->@*;
        $content;
    }
}

sub install_reqs ($self, @req) {
    my ($fh, $cpmfile) = $self->tempfile;
    $fh->print(Reqs->new(@req)->cpmfile);
    close $fh;
    my @cmd = ($self->{perl}, $self->{cpm}, "install", "-L", $self->_extlib, "--cpmfile", $cpmfile);
    my ($exit, $out) = run3 undef, @cmd;
    +{
        cmd => \@cmd,
        out => $out,
        exit => $exit,
        ok => $exit == 0,
    };
}

sub configure_reqs ($self) {
    my $reqs = $self->meta->effective_prereqs->merged_requirements(['configure'], ['requires'])->as_string_hash;
    my @req;
    for my $package (grep { $_ ne "perl" } sort keys %$reqs) {
        push @req, Req->new($package, $reqs->{$package});
    }
    @req;
}

sub reqs ($self) {
    my $reqs = $self->mymeta->effective_prereqs->merged_requirements(['build', 'test', 'runtime'], ['requires'])->as_string_hash;
    my @req;
    for my $package (grep { $_ ne "perl" } sort keys %$reqs) {
        push @req, Req->new($package, $reqs->{$package});
    }
    @req;
}

sub all_reqs ($self) {
    my $reqs = $self->mymeta->effective_prereqs->merged_requirements(['configure', 'build', 'test', 'runtime'], ['requires'])->as_string_hash;
    my @req;
    for my $package (grep { $_ ne "perl" } sort keys %$reqs) {
        push @req, Req->new($package, $reqs->{$package});
    }
    @req;
}

sub perl_req ($self) {
    my $reqs = $self->meta->effective_prereqs->merged_requirements(['configure', 'build', 'test', 'runtime'], ['requires'])->as_string_hash;
    $reqs->{perl} || "0";
}

sub meta ($self) {
    $self->{_meta} ||= do {
        my ($file) = grep -f, 'META.json', 'META.yml';
        CPAN::Meta->load_file($file);
    };
}

sub mymeta ($self) {
    $self->{_mymeta} ||= do {
        my ($file) = grep -f, 'MYMETA.json', 'MYMETA.yml';
        CPAN::Meta->load_file($file);
    };
}

sub configure ($self) {
    my (@cmd, $out, $exit);
    CONFIGURE: {
        if (-f 'Build.PL') {
            @cmd = ($self->{perl}, "Build.PL");
            ($exit, $out) = run3 $self->_env, @cmd;
            if ($exit == 0 && -f 'Build') {
                $self->{builder} = 'MB';
                last CONFIGURE;
            }
        }
        if (-f 'Makefile.PL') {
            @cmd = ($self->{perl}, 'Makefile.PL');
            ($exit, $out) = run3 $self->_env, @cmd;
            if ($exit == 0 && -f 'Makefile') {
                $self->{builder} = 'EUMM';
                last CONFIGURE;
            }
        }
    }
    return {
        cmd => \@cmd,
        out => $out,
        exit => $exit,
        ok => !!$self->{builder},
    };
}

sub build ($self) {
    my @cmd;
    if ($self->{builder} eq 'MB') {
        @cmd = ($self->{perl}, 'Build');
    } else {
        @cmd = ($self->{make});
    }
    my ($exit, $out) = run3 $self->_env, @cmd;
    return {
        cmd => \@cmd,
        out => $out,
        exit => $exit,
        ok => $exit == 0,
    };
}

sub test ($self) {
    my @cmd;
    if ($self->{builder} eq 'MB') {
        @cmd = ($self->{perl}, 'Build', 'test');
    } else {
        @cmd = ($self->{make}, 'test');
    }
    my ($exit, $out) = run3 $self->_env, @cmd;
    return {
        cmd => \@cmd,
        out => $out,
        exit => $exit,
        ok => $exit == 0,
    };
}

sub install ($self) {
    my @cmd;
    if ($self->{builder} eq 'MB') {
        @cmd = ($self->{perl}, 'Build', 'install');
    } else {
        @cmd = ($self->{make}, 'install');
    }
    my ($exit, $out) = run3 $self->_env, @cmd;
    return {
        cmd => \@cmd,
        out => $out,
        exit => $exit,
        ok => $exit == 0,
    };
}

sub available_reqs ($self, @req) {
    my @toolchain = qw(
        CPAN::Meta
        CPAN::Meta::YAML
        Cwd
        ExtUtils::CBuilder
        ExtUtils::MakeMaker
        ExtUtils::ParseXS
        File::Spec
        JSON::PP
        Module::Build
        Module::Build::Tiny
        Test::Harness
        Test::More
        version
    );
    my $res = {
        toolchains => {},
        reqs => {},
    };
    for my $package (@toolchain) {
        my $available = $self->_available_version($package);
        $res->{toolchains}{$package} = { $available->%* };
    }
    for my $req (@req) {
        my $available = $self->_available_version($req->{package});
        $res->{reqs}{$req->{package}} = { $available->%*, want => $req->{version} || "0" };
    }
    $res;
}

my $_available_script_content = <<'SCRIPT';
#!/usr/bin/env perl
use strict;
use warnings;

my $package = shift;
(my $file = $package) =~ s{::}{/}g;
$file .= ".pm";

eval { require $file } or exit 1;

my $v = $package->VERSION || "0";
my $inc = $INC{$file};

print <<EOF;
{
    "have": "$v",
    "path": "$inc"
}
EOF
SCRIPT

sub _available_version ($self, $package) {
    state $available_script = do {
        my ($fh, $file) = $self->tempfile;
        $fh->print($_available_script_content);
        close $fh;
        $file;
    };
    my ($exit, $out) = run3 $self->_env, $self->{perl}, $available_script, $package;
    if ($exit == 0) {
        return JSON::PP::decode_json $out;
    } else {
        return { have => "na" };
    }
}

sub envs ($self) {
    my @name = qw(
        /HARNESS/
        /LC_/
        /PERL/
        /_TEST/
        CCFLAGS
        COMSPEC
        INCLUDE
        INSTALL_BASE
        LANG
        LANGUAGE
        LD_LIBRARY_PATH
        LDFLAGS
        LIB
        NON_INTERACTIVE
        NUMBER_OF_PROCESSORS
        PATH
        PREFIX
        PROCESSOR_IDENTIFIER
        SHELL
        TERM
        TEMP
        TMPDIR
    );

    my $env = $self->_env;
    local %ENV = $env->%* if $env;
    my @key;
    for my $name (@name) {
        if (my ($regexp) = $name =~ m{/(.*)/}) {
            push @key, grep { $_ =~ /$regexp/ } keys %ENV
        } else {
            push @key, grep { $_ eq $name } keys %ENV;
        }
    }
    return +{ map { ($_, $ENV{$_}) } @key };
}

sub perl_V ($self) {
    my ($exit, $out) = run3 $self->_env, $self->{perl}, "-V";
    return $out;
}

my $_perl_info_script_content = <<'SCRIPT';
#!/usr/bin/env perl
use strict;
use warnings;
use Config;

print <<EOF;
{
    "os_name": "$Config{osname}",
    "os_version": "$Config{osvers}",
    "archname": "$Config{archname}",
    "myarchname": "$Config{myarchname}",
    "version": "$Config{version}",
    "\$^X": "$^X",
    "\$UID": "$<",
    "\$EUID": "$>",
    "\$GID": "$(",
    "\$EGID": "$)"
}
EOF
SCRIPT

sub perl_info ($self) {
    state $perl_info_script = do {
        my ($fh, $file) = $self->tempfile;
        $fh->print($_perl_info_script_content);
        close $fh;
        $file;
    };
    my ($exit, $out) = run3 $self->_env, $self->{perl}, $perl_info_script;
    if ($exit != 0) {
        die $out;
    }
    JSON::PP::decode_json $out;
}

__PACKAGE__->new->parse_options(@ARGV)->run if !caller;
